@startuml
== Connecting ==
participant "Node A" as A
participant "Node B" as B
A -> B : TLS handshake\n(self-issued vendor TLS certificate)
activate A
activate B
A -> A: Verify peer certificate
B -> B: Verify peer certificate
note right
   Certificate is verified against
   preconfigured Nuts Foundation
   certificate tree.
end note
B --> A : TLS handshake completed

A -> B : Hello(peerInfo)
note right
   Peer info contains a node's <i>multiaddr</i>
   (as in libp2p) containing all addresses that can
   be used to connect to this node. This allows nodes
   of the same vendor to form a cluster (probably behind a firewall).
end note
B -> B : Add to peerlist
B --> A : (peerInfo)
A -> A : Add to peerlist

== Discovery ==
B -> A : AdvertPeerList(peerlist)
note right
    Peerlist advertisement to newly connected peers
    can happen concurrently; there's no defined order
    (first node A then B or vice versa).
end note
A --> B
loop for each in peerlist
    A -> A : Connect to new peer
end
note right
   TODO: Should node B broadcast node A's
   peerInfo to its other peers?
end note
A -> B : AdvertPeerList(peerlist)
B --> A
loop for each in peerlist
    B -> B : Connect to new peer
end

== Broadcasting ==
loop for each peer
    A -> B : Broadcast(channel, hash)
    note right
       we broadcast the message to all of our peers. Since we
       have a full mesh network relaying the message is not necessary.
       Broadcasts at-most-once (no guaranteed delivery).
    end note
end
@enduml