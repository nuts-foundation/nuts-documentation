# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import subprocess
import io

sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = u'Nuts'
copyright = u'2020, Nuts community'
author = u'Nuts community'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u''

# -- RTD configuration ------------------------------------------------

# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org
on_rtd = os.environ.get("READTHEDOCS", None) == "True"

# This is used for linking and such so we link to the thing we're building
rtd_version = os.environ.get("READTHEDOCS_VERSION", "latest")

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinxcontrib.httpdomain',
    'sphinx-jsonschema',
    'sphinx.ext.autosectionlabel',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

from recommonmark.parser import CommonMarkParser

source_parsers = {
    '.md': CommonMarkParser,
}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
#source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store', 'README.rst']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


intersphinx_mapping = {
    "nuts-discovery": ("https://nuts-discovery.readthedocs.io/en/%s/" % rtd_version, None),
    "nuts-consent-cordapp": ("https://nuts-consent-cordapp.readthedocs.io/en/%s/" % rtd_version, None),
    "nuts-registry": ("https://nuts-registry.readthedocs.io/en/%s/" % rtd_version, None),
    "nuts-crypto": ("https://nuts-crypto.readthedocs.io/en/%s/" % rtd_version, None),
}

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'
html_theme_path = ["_themes", ]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}
html_sidebars = { '**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'] }


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Nutsdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Nuts.tex', u'Nuts Documentation',
     u'Nuts community', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'nuts', u'Nuts Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Nuts', u'Nuts Documentation',
     author, 'Nuts', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

modules = [
    'nuts-discovery',
    'nuts-consent-cordapp',
    'nuts-consent-logic',
    'nuts-crypto',
    'nuts-event-octopus',
    'nuts-registry',
    'nuts-consent-bridge',
    'nuts-consent-store',
    'nuts-network-local',
    'nuts-fhir-validation',
    'nuts-go',
    'nuts-go-core',
    'nuts-auth']

def download_repo(repo, branch):
    url = "https://codeload.github.com/nuts-foundation/{}/tar.gz/{}".format(repo, branch)
    print("Downloading {}".format(url))

    ps_process = subprocess.Popen(['curl', url], stdout=subprocess.PIPE)
    grep_process = subprocess.Popen(["tar", "-xz", "--strip=2", "{}-{}/docs/pages".format(repo, branch), "{}-{}/docs/_static".format(repo, branch)], stdin=ps_process.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    ps_process.stdout.close()

    return grep_process.communicate()[1]

def download_module(module, branch):
    output = download_repo(module, branch)
    print("Output: {}".format(str(output)))
    if str.find(str(output), 'tar: Unrecognized archive format') != -1:
        print("branch {} not found for {}, switching to master".format(branch, module))
        download_repo(module, 'master')

def config_init_handler(app, config):
    branch = rtd_version

    if rtd_version == "latest":
        branch = "master"

    if rtd_version == "stable":
        branch = latest_tag()

    for m in modules:
        download_module(m, branch)

def latest_tag():
    git_process = subprocess.Popen(['git', 'tag'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    sort_process = subprocess.Popen(['sort', '-r', '--version-sort'], stdin=git_process.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    head_process = subprocess.Popen(['head', '-n1'], stdin=sort_process.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    git_process.stdout.close()
    sort_process.stdout.close()

    bytes = head_process.communicate()[0]
    return bytes.decode("utf-8").rstrip()

def setup(app):
    app.connect('config-inited', config_init_handler)
    app.add_stylesheet('css/style.css')
    app.add_stylesheet('css/swagger-ui.css')
